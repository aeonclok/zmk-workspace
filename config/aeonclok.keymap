#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
//#include <behaviors/num_word.dtsi> // requires auto-layer module

#include "zmk-helpers/helper.h"

#define WIN 0
#define MAC 1

#define AS(keycode) &as LS(keycode) keycode

#define KEYS_L 33 34 35 36 37 38 49 50 51 52 53 54 63 64 65 66 67 68
#define KEYS_R 39 40 41 42 43 44 45 55 56 57 58 59 60 61 69 70 71 72 73 74
#define KEYS_T 80 82

#define COMBO_TERM_FAST 35
#define COMBO_TERM_SLOW 50
#define COMBO_GLOBAL_QUICKTAP 100

//        0  1  2  3       4  5  6  7           <- row 0
//    8  9  10 11 12       13 14 15 16 17       <- row 1
// 18 19 20 21 22             23 24 25 26 27    <- row 2
// 28 29       30 31 32 33 34 35       36 37    <- row 3

// Left Top Row
#define LTR  0  // Left Top Ring
#define LTM  1  // Left Top Middle
#define LTI  2  // Left Top Index
#define LTIS 3  // Left Top Index Side

// Right Top Row
#define RTIS 4
#define RTI  5
#define RTM  6
#define RTR  7

// Left Home Row
#define LHRS 8
#define LHR  9
#define LHM  10
#define LHI  11
#define LHIS 12

// Right Home Row
#define RHIS 13
#define RHI  14
#define RHM  15
#define RHR  16
#define RHRS 17

// Left Bottom Row
#define LHPS 18
#define LHP  19
#define LBR  20
#define LBM  21
#define LBI  22

// Right Bottom Row
#define RBI  23
#define RBM  24
#define RBR  25
#define RHP  26
#define RHPS 27

// Left Row 4
#define LBPS 28
#define LBP  29
#define LTL  30 // Left Thumb Left
#define LBM  31 // Left Thumb Middle
#define LBR  32 // Left Thumb Right

// Right Row 4
#define RTL  33
#define RBM  34
#define RBR  35
#define RBP  36
#define RBPS 37

//#define hmTAPPING_TERM 300
//#define hmTAPPING_TERM_FAST 200

#define MACRO(_name_, _bindings_)          \
_name_: _name_##_macro {                   \
    compatible     = "zmk,behavior-macro"; \
    #binding-cells = <0>;                  \
    tap-ms         = <1>;                  \
    wait-ms        = <1>;                  \
    bindings       = <_bindings_>;         \
};

/ {
    macros {
        MACRO(backtick,  &kp LS(EQUAL) &kp SPACE)
        MACRO(caret,  &kp LS(RIGHT_BRACKET) &kp SPACE) 
        MACRO(tilde, &kp RA(RIGHT_BRACKET) &kp SPACE)
    };
};

#define MODMORPH(_name_, _bindings_, _bindings_shift_)               \
_name_: _name_##_modmorph {                                          \
    compatible = "zmk,behavior-mod-morph";                           \
    #binding-cells = <0>;                                            \
    bindings = <_bindings_>, <_bindings_shift_>;                     \
    mods = <(MOD_LSFT | MOD_RSFT)>;                                  \
};

#define COMBO(_name_, _bindings_, _key_positions_, _layers_)    \
combo_##_name_ {                                                \
    timeout-ms            = <COMBO_TERM_FAST>;                  \
    require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;            \
    bindings              = <_bindings_>;                       \
    key-positions         = <_key_positions_>;                  \
    layers                = <_layers_>;                         \
};

//#define SMART_NUM &smart_num NUM 0
//ZMK_HOLD_TAP(smart_num,
//    flavor = "balanced";
//    tapping-term-ms = <200>;
//    quick-tap-ms = <175>;
//    bindings = <&mo>, <&num_dance>;
//)
//ZMK_TAP_DANCE(num_dance,
//    tapping-term-ms = <200>;
//    bindings = <&num_word NUM>, <&sl NUM>;  // reverse this for sticky-num on single tap
//)

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <175>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R KEYS_T)
MAKE_HRM(hmr, &kp, &kp, KEYS_L KEYS_T)

#define MAKE_HRMS(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <175>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
    )
MAKE_HRMS(hmls, &kp, &kp, KEYS_R KEYS_T)
MAKE_HRMS(hmrs, &kp, &kp, KEYS_L KEYS_T)

#define MAKE_HRMN(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <175>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRMN(hmln, &mo, &kp, KEYS_R KEYS_T)
MAKE_HRMN(hmrn, &mo, &kp, KEYS_L KEYS_T)


// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_MOD_MORPH(smart_shft,
    bindings = <&skq LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};


// Alt+Tab swapper, requires PR #1366
ZMK_TRI_STATE(switcher_win,
    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
    ignored-key-positions = <12>, <1>;
)
ZMK_TRI_STATE(switcher_mac,
    bindings = <&kt LCMD>, <&kp TAB>, <&kt LCMD>;
    ignored-key-positions = <12>, <1>;
)
ZMK_TRI_STATE(quick_sw_win,
    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
)
ZMK_TRI_STATE(quick_sw_mac,
    bindings = <&kt LCMD>, <&kp TAB>, <&kt LCMD>;
)

/ { 

    combos {
        compatible = "zmk,combos";

//        0             1             2             3             4                  5             6             7             8             9
//
//
//
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                                                                                                 ──────┬─────────────┬─────────────┬───────────┬─────────────╮
//            ┌─────┐       ┌─────┐       ┌─────┐       ┌─────┐                          ┌─────┐       ┌─────┐       ┌─────┐       ┌─────┐
//        F   │hakea│   P   │ Tab │   L   │ { } │   H   │  €  │   B                  W   │     │   G   │ "   │   O   │  ?  │  . :  │     │   Q
//            └──┬──┘    ┌──└──┬──┘──┐ ┌──└──┬──┘──┐ ┌──└──┬──┘──┐                    ┌──└──┬──┘──┐ ┌──└──┬──┘──┐ ┌──└──┬──┘──┐    └──┬──┘
// ├─────────────┼───────│QckSw│Swtch│─│     │ [ ] │─│     │  @  │───────┤    ├───────│     │     │─│ ' ´ │     │─│     │  !  │───────┼─────────────┤                                                                                                                                 ──────┼─────────────┼─────────────┼─────────────┼─────────────┤
//            ┌─────┐    └──┌─────┐──┘ └──┌─────┐──┘ └──┌─────┐──┘                    └──┌─────┐──┘ └──┌─────┐──┘ └──┌─────┐──┘    ┌─────┐
//      7 S   │stnk1│ 5 T   │ Esc │ 3 N   │ ( ) │ 1 K   │     │   V                0 C   │     │ 2 U   │Rtrn │ 4 A   │Bs Dl│ 6 E   │     │ 8 I
//      Ctrl  └──┬──┘ Alt┌──└──┬──┘──Gui──└──┬──┘──Num──└──┬──┘──┐                    ┌──└──┬──┘──Num──└──┬──┘──Gui──└──┬──┘──┐Alt └──┬──┘ Ctrl
// ├─────────────┼───────│Copy │Paste│─│     │ < > │─│     │  $  │───────┤    ├───────│     │     │─│ = % │  :  │─│  |  │ / \ │───────┼─────────────┤                                                                                                                                 ──────┼─────────────┼─────────────┼─────────────┼─────────────┤
//            ┌─────┐    └──┌─────┐──┘ └──┌─────┐──┘ └──┌─────┐──┘                    └──┌─────┐──┘ └──┌─────┐──┘ └──┌─────┐──┘    ┌─────┐
//        J   │     │   D   │ ~ ^ │   R   │ & # │ 9 M   │     │   X                8 Z   │     │   Y   │ + * │   Ä   │ - _ │   Ö   │     │  , ;
//            └──┬──┘       └──┬──┘       └──┬──┘       └──┬──┘                          └──┬──┘       └──┬──┘       └──┬──┘       └──┬──┘
// ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯                                                                                                                                 ──────┼─────────────┼─────────────┼─────────────┼─────────────╯
//
//                                               SmrtShft     Repeater           L2 + Space    L3 + Rtrn
//
//                                           ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
//
//
//
        // 1 and 1+2 row combos left hand
//        COMBO(tog_hakea,        &tog HAKEA,           0 1, WIN MAC NUM MOUSE NAV HAKEA REPEAT)
//        COMBO(tog_stnk1,        &tog REPEAT,           10 11, WIN MAC NUM MOUSE NAV HAKEA REPEAT)
        COMBO(TAB,              &kp TAB,              LTR LTM, WIN MAC)
//        COMBO(br_curly_mac,     &mod_br_curly_mac,    2 3, MAC)
//        COMBO(br_curly_win,     &mod_br_curly_win,    2 3, WIN)
//        COMBO(euro_mac,         &kp LS(NUMBER_4),     3 4, MAC)
//        COMBO(euro_win,         &kp RA(E),            3 4, WIN)
//        COMBO(br_square,        &mod_br_square,       2 13, WIN MAC)
//        COMBO(at,               &kp RA(NUMBER_2),     3 14, WIN MAC)
//        COMBO(switcher_mac,     &switcher_mac,        1 12, MAC NUM)
//        COMBO(quick_sw_mac,     &quick_sw_mac,        11 2, MAC NUM)
//        COMBO(switcher_win,     &switcher_win,        1 12, WIN NUM)
//        COMBO(quick_sw_win,     &quick_sw_win,        11 2, WIN NUM)
//        
//        // 1 and 1+2 row combos right hand
//        COMBO(doublequote,      &kp LS(NUMBER_2),     6 7, WIN MAC)
//        COMBO(question,         &kp LS(MINUS),        7 8, WIN MAC)
//        COMBO(exclamation,      &kp LS(NUMBER_1),     7 18, WIN MAC)
//        COMBO(squot_btick,      &mod_squot_btick,     16 7, WIN MAC)
//        COMBO(copy_mac,         &kp LG(C),            15 6, MAC NUM)
//        COMBO(copy_win,         &kp LC(C),            16 7, WIN NUM)
//
//        // 2 and 2+3 row combos left hand
        COMBO(esc,              &kp ESC,              LHR LHM, WIN MAC)
//        COMBO(br_round,         &mod_br_round,        12 13, WIN MAC)
//        COMBO(br_angled_mac,    &mod_br_angled_mac,   12 23, MAC)
//        COMBO(br_angled_win,    &mod_br_angled_win,   12 23, WIN)
//        COMBO(dollar,           &kp RA(NUMBER_4),     13 24, WIN MAC)
//
        // 2 and 2+3 row combos right hand
        COMBO(enter,            &kp RET,              RHI RHM, WIN MAC)
        COMBO(backspace_delete, &mod_bspc_del,        RHM RHR, WIN MAC)
//        COMBO(equals_percent,   &mod_equals_percent,  26 17, WIN MAC)
//        COMBO(colon,            &kp LS(DOT),          27 16, WIN MAC)
//        COMBO(mod_slashes_win,  &mod_slashes_win,     17 28, WIN)
//        COMBO(mod_slashes_mac,  &mod_slashes_mac,     17 28, MAC)
//        COMBO(pipe_mac,         &kp RA(NUMBER_7),     27 18, MAC)
//        COMBO(pipe_win,         &kp RA(NON_US_BSLH),  27 18, WIN)
//        COMBO(paste_mac,        &kp LG(V),            25 16, MAC)
//        COMBO(paste_win,        &kp LC(V),            26 17, WIN)
//
//        // 3 row combos left hand
//        COMBO(amp_hash,         &mod_amp_hash,        22 23, WIN MAC)
//        COMBO(tilde_caret,      &mod_tilde_caret,     21 22, WIN MAC)
//
//        // 3 row combos right hand
//        COMBO(plus_asterisk,    &mod_plus_asterisk,   26 27, WIN MAC)
//        COMBO(minus,            &kp SLASH,            27 28, WIN MAC)
//      
//        // mixed combos
//        COMBO(toggle_win_mac,   &tog MAC,             30 31 32 33, WIN MAC)
//        COMBO(toggle_mouse,     &tog MOUSE,           6 8, WIN MAC)
//        COMBO(toggle_num,       &tog NUM,             13 16, WIN MAC)
//        COMBO(toggle_unlock,    &studio_unlock,       4 5, WIN MAC)

    };

    behaviors {
       skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <1000>;
        quick-release;
        ignore-modifiers;
      };
        lt_bspc_del: layer_tap_backspace_delete {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            //flavor = "tap-preferred";
            bindings = <&mo>, <&mod_bspc_del>;
        };
        MODMORPH(mod_br_curly_mac, &kp RA(RS(NUMBER_8)), &kp RA(RS(NUMBER_9)))
        MODMORPH(mod_br_curly_win, &kp RA(NUMBER_7), &kp RA(NUMBER_0))
        MODMORPH(mod_br_round, &kp LS(NUMBER_8), &kp LS(NUMBER_9))
        MODMORPH(mod_br_square, &kp RA(NUMBER_8), &kp RA(NUMBER_9))
        MODMORPH(mod_br_angled_win, &kp NON_US_BSLH, &kp LS(NON_US_BSLH))
        MODMORPH(mod_br_angled_mac, &kp GRAVE, &kp LS(GRAVE))
        MODMORPH(mod_bspc_del, &kp BACKSPACE, &kp DELETE)
        MODMORPH(mod_amp_hash, &kp LS(NUMBER_6), &kp LS(NUMBER_3))
        MODMORPH(mod_squot_btick, &kp BACKSLASH, &backtick)
        MODMORPH(mod_equals_percent, &kp LS(NUMBER_0), &kp LS(NUMBER_5))
        MODMORPH(mod_tilde_caret, &tilde, &caret)
        MODMORPH(mod_slashes_mac, &kp LS(NUMBER_7), &kp RA(LS(NUMBER_7)))
        MODMORPH(mod_slashes_win, &kp LS(NUMBER_7), &kp RA(MINUS))
        MODMORPH(mod_plus_asterisk, &kp MINUS ,&kp LS(BACKSLASH))
  };
    keymap {
    compatible = "zmk,keymap";
//&hml LCTRL S  &hml LALT T   &hml LGUI N
        default_layer {
        bindings = <
                          &kp P     &kp L     &kp H     &kp V                         &kp C     &kp G     &kp O     &kp DOT
                &kp F     &kp T     &kp N     &kp K     &kp B                         &kp W     &kp U     &kp A     &kp E     &kp Z
      &kp RSHFT &kp S     &kp D     &kp R     &kp M                                             &kp Y     &kp SQT   &kp SEMI  &kp I     &kp LSHFT
      &kp X     &kp J                         &kp A     &key_repeat &kp A   &lt 1 A   &kp SPACE &kp A                         &kp COMMA &kp Q
        >;
        };

        second_layer {
        bindings = <
                          &trans    &trans    &trans    &trans                        &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
                &trans    &trans    &trans    &trans    &trans                        &trans &trans  &trans   &trans    &trans
      &trans    &trans    &trans    &trans    &trans                                            &trans    &trans    &trans    &trans    &trans
      &trans    &trans                        &trans    &trans    &trans    &trans    &bootloader &sys_reset                  &bt BT_CLR &bt BT_CLR
        >;
        };
    };
};


//                          RC(0,0) RC(0,1) RC(0,2) RC(0,3)                 RC(0,8) RC(0,7) RC(0,6) RC(0,5)
//                  RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4)                 RC(1,9) RC(1,8) RC(1,7) RC(1,6) RC(1,5)
//          RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4)                                 RC(2,9) RC(2,8) RC(2,7) RC(2,6) RC(2,5)
//          RC(3,0) RC(3,1)                 RC(3,2) RC(3,3) RC(3,4) RC(3,9) RC(3,8) RC(3,7)                 RC(3,6) RC(3,5)
